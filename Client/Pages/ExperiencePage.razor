@page "/ExperiencePage"
@using achraf.Shared
@using achraf.Shared.Models
@inject HttpClient Http
@using System.Linq

<h1> ASP.NET Core BLAZOR CRUD demo for Youtube</h1>
<hr />
<table width="100%" style="background:#05163D;color:honeydew">
    <tr>
        <td width="20"> </td>
        <td>
            <h2> Add New Experience</h2>
        </td>
        <td> </td>
        <td align="right">
            <button class="btn btn-info" @onclick="(async () => await AddNewExperience())">Clear</button>
        </td>
        <td width="10"> </td>
    </tr>
    <tr>
        <td colspan="2"></td>
    </tr>
</table>
<hr />


<div class="container">

    <form>
        <div class="form-group">
            <label for="ExperienceId">Id</label>

            <input type="text" class="form-control" @bind="TheExperience.ExperienceId" readonly />

        </div>
        <div class="form-group">
            <label for="Name">Name</label>

            <input type="text" class="form-control" @bind="TheExperience.Name" />
        </div>

        <div class="form-group" hidden>
            <label for="IsVisible">IsVisible</label>

            <input type="text" class="form-control" bind="@TheExperience.IsVisible.ToString()" value="@TheExperience.IsVisible.ToString()" readonly />
        </div>

        <div class="form-group form-check">
            <label class="form-check-label">
                <input type="checkbox" @bind="TheExperience.IsVisible" class="form-check-input" />Make It Visible ?
            </label>
        </div>
        <button type="button" class="btn btn-success" @onclick="(async () => await AddExperience())" style="width:220px;">Save</button>

    </form>
</div>


<br />
<table width="100%" style="background:#0A2464;color:honeydew">
    <tr>
        <td width="20"> </td>
        <td>
            <h2>Experience Details</h2>
        </td>

    </tr>
    <tr>
        <td colspan="2"></td>
    </tr>
</table>

@if (ListExperience == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Experience ID</th>
                <th>Experience Name</th>
                <th>Added Time</th>
                <th>Visible</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var _Experience in ListExperience)
            {
                <tr>
                    <td>@_Experience.ExperienceId</td>
                    <td>@_Experience.Name</td>
                    <td>@_Experience.Urd</td>
                    <td>@_Experience.IsVisible</td>


                    <td><button class="btn btn-primary" @onclick="@(async () => await EditExperience(_Experience.ExperienceId))" style="width:110px;">Edit</button></td>
                    <td><button class="btn btn-danger" @onclick="@(async () => await DeleteExperience(_Experience.ExperienceId))">Delete</button></td>
                </tr>

            }
        </tbody>
    </table>
}

@functions {


    private bool IsAdmin { get; set; } = true;
    Experience[] ListExperience;

    Experience TheExperience = new Experience();

    string ids = "0";
    bool showAddrow = false;
    protected override async Task OnInitializedAsync()
    {
        ListExperience = await Http.GetJsonAsync<Experience[]>("/api/Experiences/");
    }

    async Task AddNewExperience()
    {
        TheExperience = new Experience();

    }
    // Add New Experiences Details Method
    protected async Task AddExperience()

    {
        TheExperience.Urd = (System.DateTime.Now).ToShortDateString().ToString();


        if (TheExperience.ExperienceId == 0)

        {
            await Http.SendJsonAsync(HttpMethod.Post, "/api/Experiences/", TheExperience);

        }
        else
        {
            await Http.SendJsonAsync(HttpMethod.Put, "/api/Experiences/" + TheExperience.ExperienceId, TheExperience);
        }
        TheExperience = new Experience();
        ListExperience = await Http.GetJsonAsync<Experience[]>("/api/Experiences/");
    }
    // Edit Method
    protected async Task EditExperience(int ExperienceId)
    {
        ids = ExperienceId.ToString();

        TheExperience = await Http.GetJsonAsync<Experience>("/api/Experiences/" + Convert.ToInt32(ExperienceId));
    }
    // Delte Method
    protected async Task DeleteExperience(int ExperienceId)
    {
        ids = ExperienceId.ToString();
        await Http.DeleteAsync("/api/Experiences/" + Convert.ToInt32(ExperienceId));


        ListExperience = await Http.GetJsonAsync<Experience[]>("/api/Experiences/");
    }

}

